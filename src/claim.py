# class Claim used in claimsKG-extractor
from typing import Dict


class Claim:
    def __init__(self):
        """
        Default constructor, see other constructor to build object from dictionary
        """
        self.source = ""            # --> website name
        self.claim = str("")        # --> claim
        self.body = str("")         # --> review
        self.referred_links = ""    # --> les sources
        self.title = str("")        # --> claim
        self.date = ""              # --> date
        self.url = ""               # --> lien vers la claim
        self.tags = ""              # --> tags
        self.author = ""            # --> fatabyyano
        self.date_published = ""    # --> #?
        self.same_as = ""           # --> #?
        self.source_url = ""        # --> #?
        self.rating_value = ""      # --> original
        self.worst_rating = ""      # --> #?
        self.best_rating = ""       # --> #?
        self.alternate_name = ""    # --> translate of ranting
        self.claim_entities = ""    # --> #? TagMe
        self.body_entities = ""
        self.keyword_entities = ""
        self.author_entities = ""
        self.review_author = ""     # --> #?

    def generate_dictionary(self):
        if isinstance(self.referred_links, list):
            self.referred_links = ",".join(self.referred_links)
        dictionary = {'rating_ratingValue': self.rating_value, 'rating_worstRating': self.worst_rating,
                      'rating_bestRating': self.best_rating, 'rating_alternateName': self.alternate_name,
                      'creativeWork_author_name': self.author, 'creativeWork_datePublished': self.date_published,
                      'creativeWork_author_sameAs': self.same_as, 'claimReview_author_name': self.source,
                      'claimReview_author_url': self.source_url, 'claimReview_url': self.url,
                      'claimReview_claimReviewed': self.claim, 'claimReview_datePublished': self.date,
                      'claimReview_source': self.source, 'claimReview_author': self.review_author,
                      'extra_body': self.body.replace("\n", ""), 'extra_refered_links': self.referred_links,
                      'extra_title': self.title, 'extra_tags': self.tags,
                      'extra_entities_claimReview_claimReviewed': self.claim_entities,
                      'extra_entities_body': self.body_entities, 'extra_entities_keywords': self.keyword_entities,
                      'extra_entities_author': self.author_entities}
        return dictionary

    @classmethod
    def from_dictionary(cls, dictionary: Dict[str, str]) -> 'Claim':
        """
        Build claim instance from dictionary generated by the generate_dictionary method, mainly used for round tripping
        from cache.
        :param dictionary: The dictionary generated by generate_dictionary
        """
        claim = Claim()
        if 'claimReview_author_name' in dictionary.keys():
            claim.source = dictionary['claimReview_author_name']
        else:
            claim.source = ""
        claim.claim = dictionary["claimReview_claimReviewed"]
        claim.body = dictionary['extra_body']
        claim.referred_links = dictionary['extra_refered_links']
        claim.title = dictionary['extra_title']
        claim.date = dictionary['claimReview_datePublished']
        claim.url = dictionary['claimReview_url']
        claim.tags = dictionary['extra_tags']
        claim.author = dictionary['creativeWork_author_name']
        claim.date_published = dictionary['creativeWork_datePublished']
        claim.same_as = dictionary['creativeWork_author_sameAs']
        claim.source_url = dictionary['claimReview_author_url']
        claim.rating_value = dictionary['rating_ratingValue']
        claim.worst_rating = dictionary['rating_worstRating']
        claim.best_rating = dictionary['rating_bestRating']
        claim.alternate_name = dictionary['rating_alternateName']

        return claim

    def set_rating_value(self, string_value):
        if string_value:
            string_value = str(string_value).replace('"', "")
            self.rating_value = string_value
        return self

    def setWorstRating(self, str_):
        if str_:
            str_ = str(str_).replace('"', "")
            self.worst_rating = str_
        return self

    def set_best_rating(self, str_):
        if str_:
            str_ = str(str_).replace('"', "")
            self.best_rating = str_
        return self

    def set_alternate_name(self, alternate_name):
        self.alternate_name = str(alternate_name).replace('"', "").strip()
        # split sentence

        if "." in self.alternate_name:
            split_name = self.alternate_name.split(".")
            if len(split_name) > 0:
                self.alternate_name = split_name[0]

        return self

    def set_source(self, str_):
        self.source = str_
        return self

    def set_author(self, str_):
        self.author = str_
        return self

    def setSameAs(self, str_):
        self.same_as = str_
        return self

    def setDatePublished(self, str_):
        self.date_published = str_
        return self

    def set_claim(self, str_):
        self.claim = str(str_).strip()
        return self

    def set_body(self, str_):
        self.body = str(str_).strip()
        return self

    def set_refered_links(self, str_):
        self.referred_links = str_
        return self

    def set_title(self, str_):
        self.title = str(str_).strip()
        return self

    def set_date(self, str_):
        self.date = str_
        return self

    def set_url(self, str_):
        self.url = str(str_)
        return self

    def set_tags(self, str_):
        self.tags = str_

    def set_claim_entities(self, str_):
        self.claim_entities = str_

    def set_body_entities(self, str_):
        self.body_entities = str_
